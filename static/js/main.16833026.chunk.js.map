{"version":3,"sources":["reportWebVitals.js","features/home/home.model.js","features/home/home.service.js","features/home/home.js","features/home/components/HomeScreen.jsx","app/App.jsx","routes.js","app/store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GameInfo","id","name","search","gameplayMain","gameplayMainExtra","gameplayCompletionist","imageUrl","releaseDate","metacritic","this","a","fetch","response","json","items","map","i","moment","toDate","homeService","loadGames","FETCHING_GAMES","ERROR_FETCHING_GAMES","GAMES_FETCHED","homeActions","dispatch","type","gameService","games","initialState","loading","errorFetching","None","homeReducer","state","action","Object","assign","Some","error","PureHomeScreen","chart","React","createRef","props","onComponentMounted","classes","Fragment","AppBar","position","className","appbar","Toolbar","icon","Typography","variant","color","noWrap","heroContent","Container","maxWidth","component","align","gutterBottom","href","target","tableContent","CircularProgress","style","options","pageSize","pageSizeOptions","columns","title","field","render","rowData","format","defaultSort","data","Component","withRouter","connect","home","length","withStyles","theme","alignItems","marginRight","spacing","backgroundColor","palette","background","paper","padding","textAlign","table","minWidth","createMuiTheme","primary","main","blueGrey","secondary","green","App","ThemeProvider","basename","process","path","HomeScreen","store","reducer","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","thunk","initializeStore","WebFont","load","google","families","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.16833026.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","class GameInfo {\n  constructor(\n    id,\n    name,\n    search,\n    gameplayMain,\n    gameplayMainExtra,\n    gameplayCompletionist,\n    imageUrl,\n    releaseDate,\n    metacritic,\n  ) {\n    this.id = id;\n    this.name = name;\n    this.search = search;\n    this.gameplayMain = gameplayMain;\n    this.gameplayMainExtra = gameplayMainExtra;\n    this.gameplayCompletionist = gameplayCompletionist;\n    this.imageUrl = imageUrl;\n    this.releaseDate = releaseDate;\n    this.metacritic = metacritic;\n  }\n}\n\nexport default GameInfo;\n","import GameInfo from './home.model';\nimport moment from 'moment';\n\nconst homeService = {\n  loadGames,\n};\n\nasync function loadGames() {\n  const response = await fetch('HowLongToBeatGamePass/games.json');\n  const items = await response.json();\n  return items.map(\n    (i) =>\n      new GameInfo(\n        i.id,\n        i.name,\n        i.search,\n        i.gameplayMain,\n        i.gameplayMainExtra,\n        i.gameplayCompletionist,\n        i.imageUrl,\n        moment(i.releaseDate, 'MMM YYYY').toDate(),\n        i.metacritic,\n      ),\n  );\n}\n\nexport default homeService;\n","import { None, Some } from 'monet';\nimport gameService from './home.service';\n\nconst FETCHING_GAMES = 'FETCHING_GAMES';\nconst ERROR_FETCHING_GAMES = 'ERROR_FETCHING_GAMES';\nconst GAMES_FETCHED = 'GAMES_FETCHED';\n\nexport const homeActions = {\n  loadGames,\n};\n\nfunction loadGames() {\n  return (dispatch) => {\n    dispatch(fetching());\n\n    gameService.loadGames().then((response) => {\n      dispatch(gameListFetched(response));\n    });\n  };\n\n  function fetching() {\n    return { type: FETCHING_GAMES };\n  }\n\n  function errorFetching(error) {\n    return { type: ERROR_FETCHING_GAMES, error };\n  }\n\n  function gameListFetched(games) {\n    return { type: GAMES_FETCHED, games };\n  }\n}\n\nconst initialState = {\n  loading: false,\n  games: [],\n  errorFetching: None(),\n};\n\nexport function homeReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCHING_GAMES:\n      return Object.assign({}, state, {\n        loading: true,\n        errorFetching: None(),\n      });\n    case ERROR_FETCHING_GAMES:\n      return Object.assign({}, state, {\n        loading: false,\n        errorFetching: Some(action.error),\n      });\n    case GAMES_FETCHED:\n      return Object.assign({}, state, {\n        loading: false,\n        errorFetching: None(),\n        games: action.games,\n      });\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { homeActions } from '../home';\nimport MaterialTable from 'material-table';\nimport moment from 'moment';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport GamepadIcon from '@material-ui/icons/Gamepad';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = (theme) => ({\n  appbar: {\n    alignItems: 'center',\n  },\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6, 0, 6),\n  },\n  tableContent: {\n    textAlign: 'center',\n    padding: theme.spacing(12, 0, 12),\n  },\n  table: {\n    minWidth: 750,\n  },\n});\n\nclass HomeScreen extends React.Component {\n  chart = React.createRef();\n\n  componentWillMount() {\n    this.props.onComponentMounted();\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { loading } = this.props;\n    const { games } = this.props;\n\n    if (!loading) {\n      // Create table data\n    }\n\n    return (\n      <React.Fragment>\n        <AppBar position=\"relative\" className={classes.appbar}>\n          <Toolbar>\n            <GamepadIcon className={classes.icon} />\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              How long to beat each GamePass game\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <main>\n          <div className={classes.heroContent}>\n            <Container maxWidth=\"lg\">\n              <Typography\n                component=\"h1\"\n                variant=\"h4\"\n                align=\"center\"\n                color=\"textPrimary\"\n                gutterBottom\n              >\n                Number of hours playing needed to beat each Xbox Game Pass game (data from{' '}\n                <a href=\"https://howlongtobeat.com\" target=\"_blank\">\n                  HWLT\n                </a>\n                )\n              </Typography>\n            </Container>\n            <div className={classes.tableContent}>\n              {loading && <CircularProgress variant=\"indeterminate\" />}\n              {!loading && (\n                <div style={{ maxWidth: '100%' }}>\n                  <MaterialTable\n                    options={{\n                      pageSize: 50,\n                      pageSizeOptions: [20, 50],\n                    }}\n                    columns={[\n                      { title: 'Name', field: 'name' },\n                      {\n                        title: 'Gameplay Main',\n                        field: 'gameplayMain',\n                        type: 'numeric',\n                        render: (rowData) => {\n                          if (rowData.gameplayMain > 0) {\n                            return rowData.gameplayMain;\n                          }\n                          return 'N/A';\n                        },\n                      },\n                      {\n                        title: 'Gameplay Main Extra',\n                        field: 'gameplayMainExtra',\n                        type: 'numeric',\n                        render: (rowData) => {\n                          if (rowData.gameplayMainExtra > 0) {\n                            return rowData.gameplayMainExtra;\n                          }\n                          return 'N/A';\n                        },\n                      },\n                      {\n                        title: 'Gameplay Completionist',\n                        field: 'gameplayCompletionist',\n                        type: 'numeric',\n                        render: (rowData) => {\n                          if (rowData.gameplayCompletionist > 0) {\n                            return rowData.gameplayCompletionist;\n                          }\n                          return 'N/A';\n                        },\n                      },\n                      {\n                        title: 'Release Date',\n                        field: 'releaseDate',\n                        type: 'date',\n                        render: (rowData) => moment(rowData.releaseDate).format('MMM YYYY'),\n                      },\n                      {\n                        title: 'Metacritic',\n                        field: 'metacritic',\n                        type: 'numeric',\n                        defaultSort: 'desc',\n                        render: (rowData) => {\n                          if (rowData.metacritic > 0) {\n                            return rowData.metacritic;\n                          }\n                          return 'N/A';\n                        },\n                      },\n                    ]}\n                    data={games}\n                    title=\"\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport function mapStateToProps(state) {\n  return {\n    loading: state.home.loading && state.home.games.length === 0,\n    games: state.home.games,\n  };\n}\n\nexport function mapPropsToDispatch(dispatch) {\n  return {\n    onComponentMounted: () => {\n      dispatch(homeActions.loadGames());\n    },\n  };\n}\n\nexport const PureHomeScreen = HomeScreen;\nexport default withRouter(\n  connect(mapStateToProps, mapPropsToDispatch)(withStyles(styles)(PureHomeScreen)),\n);\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// Routes\nimport { INDEX } from '../routes';\n// Screens\nimport HomeScreen from '../features/home/components/HomeScreen';\n\n// Theme\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blueGrey[500],\n    },\n    secondary: {\n      main: green[500],\n    },\n    background: {\n      paper: blueGrey[50],\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path={INDEX} component={HomeScreen} />\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","export const INDEX = '/';\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { homeReducer } from '../features/home/home';\n\nexport function initializeStore(reducer) {\n  const composeEnhancers = composeWithDevTools({});\n  return createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n}\n\nexport function rootReducer(state = {}, action) {\n  return {\n    home: homeReducer(state.home, action),\n  };\n}\n\nexport const store = initializeStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// Fonts\nimport WebFont from 'webfontloader';\n// Web vitals\nimport reportWebVitals from './reportWebVitals';\n\nimport './assets/index.css';\nimport App from './app/App';\nimport { store } from './app/store';\n\nfunction initializeFonts() {\n  WebFont.load({\n    google: {\n      families: ['Roboto:300,400,500,700', 'Roboto Slab:400,700', 'Material Icons'],\n    },\n  });\n}\n\nfunction renderApplication() {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n}\n\ninitializeFonts();\nrenderApplication();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}